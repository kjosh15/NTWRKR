MIME-Version: 1.0
Date: Mon, 27 Apr 2020 12:03:28 -0400
Message-ID: <CACNgykO1di4zsBK5bBE2_Q7jyZofDsPK_QM8KKuOUnZsATL5yQ@mail.gmail.com>
Subject: architecture
From: Josh Klein <josh@josh.is>
To: Chris at Indigo <chris@indigometrics.com>
Content-Type: multipart/alternative; boundary="0000000000002df01f05a447dbcb"

--0000000000002df01f05a447dbcb
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

Based on my conversation with my friends Nick and Seth I think our roadmap
for development should follow these stages:

1) Move existing front end / back end architecture to AWS.

Based on the conversations I've had so far I expect we should be able to
secure these reasonably well using existing AWS security and key management
processes. (*We need to learn more about these.)

This means that customers can repoint their DNS for the front end component
to run the surveys and push out their own email invites (this saves us a
huge potential hassle as we scale up, as sending large numbers of emails is
an enormous challenge for an outside entity).

One other thing we should look at sooner rather than later is the use of
Docker for deploying VMs to clients. IIR, docker should let us upload a
simple set of config docs and otherwise hand over a container that has the
entire front end configured as needed.

2) Thin out the front end, beef up the back end.

Esp. as we move to VMs-only, making the front end client much thinner makes
a lot of sense. I.e., when an employee follows a link it can proxy through
to us with the API and ID keys and let the employee dump their data to our
DB directly.

This means we won't have (quite so monolithic) data spikes as customers
roll over their daily data dumps, and that we can manage the processing
more centrally. It also means that updates don't need to be managed in such
a distributed way as a thinner front end will (presumably) need less
updates/management.

3) Get fancy.

Once the above is done we should look to offloading our backend processing
with Lambdas, which are the new hotness in AWS and essentially let us point
significant processes to a dynamic service. I.e., we can choose to spin up
a lambda process to crunch all the numbers nightly and be confident it's
not going to overwhelm anything else. This should also make operational
costs much smoother.

Let me know if this makes sense and/or which bits you'd like me to help
read through first!!

- J
=E1=90=A7

--0000000000002df01f05a447dbcb
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr">Based on my conversation with my friends Nick and Seth I t=
hink our roadmap for development should follow these stages:<div><br></div>=
<div>1) Move existing front end / back end architecture to AWS.</div><div><=
br></div><div>Based on the conversations I&#39;ve had so far I expect we sh=
ould be able to secure these reasonably well using existing AWS security an=
d key management processes. (*We need to learn more about these.)=C2=A0</di=
v><div><br></div><div>This means that customers can repoint their DNS for t=
he front end component to run the surveys and push out their own email invi=
tes (this saves us a huge potential hassle as we scale up, as sending large=
 numbers of emails is an enormous challenge for an outside entity).</div><d=
iv><br></div><div>One other thing we should look at sooner rather than late=
r is the use of Docker for deploying VMs to clients. IIR, docker should let=
 us upload a simple set of config docs and otherwise hand over a container =
that has the entire front end configured as needed.=C2=A0<br></div><div><br=
></div><div>2) Thin out the front end, beef up the back end.</div><div><br>=
</div><div>Esp. as we move to VMs-only, making the front end client much th=
inner makes a lot of sense. I.e., when an employee follows a link it can pr=
oxy through to us with the API and ID keys and let the employee dump their =
data to our DB directly.=C2=A0</div><div><br></div><div>This means we won&#=
39;t have (quite so monolithic) data spikes as customers roll over their da=
ily data dumps, and that we can manage the processing more centrally. It al=
so means that updates don&#39;t need to be managed in such a distributed wa=
y as a thinner front end will (presumably) need less updates/management.=C2=
=A0</div><div><br></div><div>3) Get fancy.=C2=A0</div><div><br></div><div>O=
nce the above is done we should look to offloading our backend processing w=
ith Lambdas, which are the new hotness in AWS and essentially let us point =
significant processes to a dynamic service. I.e., we can choose to spin up =
a lambda process to crunch all the numbers nightly and be confident it&#39;=
s not going to overwhelm anything else. This should also make operational c=
osts much smoother.=C2=A0</div><div><br></div><div>Let me know if this make=
s sense and/or which bits you&#39;d like me to help read through first!!</d=
iv><div><br></div><div>- J</div><div></div></div><div hspace=3D"streak-pt-m=
ark" style=3D"max-height:1px"><img alt=3D"" style=3D"width:0px;max-height:0=
px;overflow:hidden" src=3D"https://mailfoogae.appspot.com/t?sender=3Daam9za=
EBqb3NoLmlz&amp;type=3Dzerocontent&amp;guid=3D04c76fe6-d913-491e-9cb3-bef1e=
fc7bcc4"><font color=3D"#ffffff" size=3D"1">=E1=90=A7</font></div>

--0000000000002df01f05a447dbcb--